.TH "MEMCACHED_SERVER_LIST" "3" "April 14, 2011" "0.47" "libmemcached"
.SH NAME
memcached_server_list \- libmemcached Documentation
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.\" Man page generated from reStructeredText.
.
.sp
Manage server list
.SH LIBRARY
.sp
C Client Library for memcached (libmemcached, \-lmemcached)
.SS SYNOPSIS
.sp
.nf
.ft C
#include <libmemcached/memcached.h>

uint32_t memcached_server_count (memcached_st *ptr);

memcached_return_t memcached_server_add (memcached_st *ptr, const char *hostname, in_port_t port);

memcached_return_t memcached_server_add_udp (memcached_st *ptr, const char *hostname, in_port_t port);

memcached_return_t memcached_server_add_unix_socket (memcached_st *ptr, const char *socket);

memcached_return_t memcached_server_push (memcached_st *ptr, const memcached_server_st *list);

memcached_server_instance_st memcached_server_by_key (const memcached_st *ptr, const char *key, size_t key_length, memcached_return_t *error);

memcached_server_instance_st memcached_server_get_last_disconnect (const memcached_st *ptr)

memcached_return_t memcached_server_cursor(const memcached_st *ptr, const memcached_server_fn *callback, void *context, uint32_t number_of_callbacks);
.ft P
.fi
.SS DESCRIPTION
.sp
libmemcached(3) performs operations on a list of hosts. The order of these
hosts determine routing to keys. Functions are provided to add keys to
memcached_st structures. To manipulate lists of servers see
memcached_server_st(3).
.sp
memcached_server_count() provides you a count of the current number of
servers being used by a \fBmemcached_st\fP structure.
.sp
memcached_server_add() pushes a single TCP server into the \fBmemcached_st\fPstructure. This server will be placed at the end. Duplicate servers are
allowed, so duplication is not checked. Executing this function with the
\fBMEMCACHED_BEHAVIOR_USE_UDP\fP behavior set will result in a
\fBMEMCACHED_INVALID_HOST_PROTOCOL\fP.
.sp
memcached_server_add_udp() pushes a single UDP server into the \fBmemcached_st\fPstructure. This server will be placed at the end. Duplicate servers are
allowed, so duplication is not checked. Executing this function with out
setting the \fBMEMCACHED_BEHAVIOR_USE_UDP\fP behavior will result in a
\fBMEMCACHED_INVALID_HOST_PROTOCOL\fP.
.sp
memcached_server_add_unix_socket() pushes a single UNIX socket into the
\fBmemcached_st\fP structure. This UNIX socket will be placed at the end.
Duplicate servers are allowed, so duplication is not checked. The length
of the filename must be one character less then MEMCACHED_MAX_HOST_LENGTH.
.sp
memcached_server_push() pushes an array of \fBmemcached_server_st\fP into
the \fBmemcached_st\fP structure. These servers will be placed at the
end. Duplicate servers are allowed, so duplication is not checked. A
copy is made of structure so the list provided (and any operations on
the list) are not saved.
.sp
memcached_server_by_key() allows you to provide a key and retrieve the
server which would be used for assignment. This structure is cloned
from its original structure and must be freed. If NULL is returned you
should consult *error. The returning structure should be freed with
memcached_server_free().
.sp
memcached_server_get_last_disconnect() returns a pointer to the last server
for which there was a connection problem. It does not mean this particular
server is currently dead but if the library is reporting a server is,
the returned server is a very good candidate.
.sp
memcached_server_cursor() takes a memcached_st and loops through the
list of hosts currently in the cursor calling the list of callback
functions provided. You can optionally pass in a value via
context which will be provided to each callback function. An error
return from any callback will terminate the loop. memcached_server_cursor()
is passed the original caller memcached_st in its current state.
.SH RETURN
.sp
Varies, see particular functions.
.SH HOME
.sp
To find out more information please check:
\fI\%http://libmemcached.org/\fP
.SS SEE ALSO
.sp
\fImemcached(1)\fP \fIlibmemcached(3)\fP \fImemcached_strerror(3)\fP
.SH AUTHOR
Brian Aker
.SH COPYRIGHT
2011, Brian Aker DataDifferential, http://datadifferential.com/
.\" Generated by docutils manpage writer.
.\" 
.
